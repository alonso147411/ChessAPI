This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
package.json
src/routes/endpointEnrichedUser.ts
src/routes/endpointTop10.ts
src/routes/endpointTopPlayerHistory.ts
src/routes/endpointUserById.ts
src/server.ts
src/utils/errors.ts
src/utils/lichessApiCalls.ts
src/utils/schemas.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/utils/errors.ts">
export const sendError500 = function (reply:any) {
    return reply.status(500).send({ error: 'Internal server error' });
}

export const sendError400= function (reply: any) {
    return reply.status(400).send({ error: 'One or more required parameters are missing' });
}

export const sendError404 = function (reply: any) {
    return reply.status(404).send({ error: 'Resource not found' });
}
</file>

<file path="src/utils/lichessApiCalls.ts">
import axios from 'axios';


export const top10EndpointCall = async function () {
    return  await axios.get('https://lichess.org/api/player');
}

export const userByIdEndpointCall = async function (id?:string) {
    return await axios.post(
        'https://lichess.org/api/users',
        id,
        {
            headers: {
                "Content-Type": "text/plain",
            }
        }
    );
}

export const performanceStatisticsEndpointCall = async function (id?:string,mode?:string) {
    return await axios.get(`https://lichess.org/api/user/${id}/perf/${mode}`);
}

export const top200PlayerEndpointCall = async function (mode?:string) {
    return await axios.get(`https://lichess.org/api/player/top/200/${mode}`);
}

export const ratingUserHistoryEndpointCall = async function (username?: string) {
    return await axios.get(`https://lichess.org/api/user/${username}/rating-history`);
}
</file>

<file path="src/utils/schemas.ts">
export const top10schema = {
    schema: {
    response: {
        200: {
            type: "object",
            additionalProperties: {
                type: "array",
                items: {
                    type: "object",
                    properties: {
                        id: { type: "string" },
                        username: { type: "string" },
                        perfs: { type: "object", additionalProperties: true }
                    },
                    required: ["id", "username", "perfs"]
                }
            }
        },
            404: {
                type: "object",
                properties: {
                  error: { type: "string" }
                },
                required: ["error"]
              },
              500: {
                type: "object",
                properties: {
                  error: { type: "string" }
                },
                required: ["error"]
              }
    }
}
}

export const enrichedUserSchema = {
        schema: {
            response: {
                200: {
                    type: "object",
                        properties: {
                            id: {type: "string" },
                            username: {type: "string" },
                            profile: { type: "object",additionalProperties: true  },
                            playTime: { type: "object",additionalProperties: true  },
                            rank: {type:"number"},
                            resultStreak: {type: "object",additionalProperties: true},
                        }
                },
                400: {
                    type: "object",
                    properties: {
                      error: { type: "string" }
                    },
                    required: ["error"]
                  },
                404: {
                    type: "object",
                    properties: {
                      error: { type: "string" }
                    },
                    required: ["error"]
                  },
                  500: {
                    type: "object",
                    properties: {
                      error: { type: "string" }
                    },
                    required: ["error"]
                  }
            }
        }
}
    
export const topPlayerHistorySchema = {
  schema: {
      response: {
          200: {
              type: "object",
              
              properties: {
                  username: { type: "string" },
                  history: {
                      type: "array",
                      items: {
                          type: "object",
                          properties: {
                              date: { type: "string" },
                              rating: { type: "number" }
                          }
                      }
                  }
              }
          },
          400: {
              type: "object",
              properties: {
                error: { type: "string" }
              },
              required: ["error"]
            },
          404: {
              type: "object",
              properties: {
                error: { type: "string" }
              },
              required: ["error"]
            },
            500: {
              type: "object",
              properties: {
                error: { type: "string" }
              },
              required: ["error"]
            }
      }
  }
  
}

export const userByIdSchema =  {
  schema: {
      response: {
          200: {
              type: "array",
              items: {
                  type: "object",
                  required: ["id", "username", "modes"],
                  properties: {
                      id: { type: "string" },
                      username: { type: "string" },
                      modes: { type: "object" ,additionalProperties: true },
                      flair: { type: "string" },
                      patron: { type: "boolean" },
                      verified: { type: "boolean" },
                      createdAt: { type: "number" },
                      profile: { type: "object",additionalProperties: true  },
                      seenAt: { type: "number" },
                      playTime: { type: "object",additionalProperties: true  },
                  }
              }
          },
          400: {
              type: "object",
              properties: {
                error: { type: "string" }
              },
              required: ["error"]
            },
          404: {
              type: "object",
              properties: {
                error: { type: "string" }
              },
              required: ["error"]
            },
            500: {
              type: "object",
              properties: {
                error: { type: "string" }
              },
              required: ["error"]
            }
      }
  }
}
</file>

<file path="tsconfig.json">
{
    "compilerOptions": {
      "module": "commonjs",
      "target": "es2019",
      "esModuleInterop": true,
      "moduleResolution": "node",
      "outDir": "dist",
      "rootDir": "src",
      "strict": true
    }
  }
</file>

<file path="package.json">
{
  "name": "chessapi",
  "version": "1.0.0",
  "description": "",
  "main": "./src/server.ts",
  "scripts": {
    "start": "ts-node src/server.ts",
    "dev": "nodemon --watch src --exec ts-node src/server.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.10.0",
    "fastify": "^5.4.0",
    "fastify-swagger": "^5.2.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@types/axios": "^0.9.36",
    "@types/node": "^24.0.13",
    "nodemon": "^3.1.10",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  }
}
</file>

<file path="src/server.ts">
import fastify from 'fastify';
import getTop10 from './routes/endpointTop10';
import getUserById from './routes/endpointUserById';
import getEnrichedUser from './routes/endpointEnrichedUser';
import getTopPlayerHistory from './routes/endpointTopPlayerHistory';

const app = fastify({ logger: true });
const PORT = 5555;

getTop10(app);
getUserById(app);
getEnrichedUser(app);
getTopPlayerHistory(app);


const start = async () => {
    try{
        await app.listen({port:PORT});
    }catch(error){
        app.log.error(error);
        process.exit();
    }
}

start();
</file>

<file path="src/routes/endpointTopPlayerHistory.ts">
import { topPlayerHistorySchema } from '../utils/schemas';
import { ratingUserHistoryEndpointCall, top200PlayerEndpointCall } from '../utils/lichessApiCalls';
import { sendError400, sendError404, sendError500 } from '../utils/errors';

const getTopPlayerHistory = function( fastify: any ){
    fastify.get('/chess/topPlayerHistory',topPlayerHistorySchema , async (request: any, reply: any) => {
        try {
            const { mode , top} = request.query as {mode?:string, top?:number};
            if (!mode || !top) {
                sendError400(reply);
                return;
            }

            const topResponse = await top200PlayerEndpointCall(mode);

            const usersData = topResponse.data as { users?: any[] };
            const players = usersData.users ?? [];
            
            if (!Array.isArray(players) || players.length < top) {
                sendError404(reply);
            }
            const player = players[top - 1];
           
            const historyResponse = await ratingUserHistoryEndpointCall(player.username);
            const history = historyResponse.data as any;
            

            const modeHistory = Array.isArray(history) ? history.find((h: any) => h.name.toLowerCase() === mode.toLowerCase()) : null;

            if (!modeHistory || !Array.isArray(modeHistory.points)) {
                sendError404(reply);
            }

            const historyFormated = modeHistory.points.map((point: any) => ({
                date: new Date(point[0], 0, 1 + point[1]).toISOString().slice(0, 10), 
                rating: point[3]
            }));

            const out = {
                username: player.username,
                history: historyFormated,
            }

            reply.send(out);
            
        } catch (error:any) {
            if (error.response && error.response.status === 404) {
                sendError404(reply);
            }
            if (error.response && error.response.status === 400) {
                sendError400(reply);
            }
            sendError500(reply);
        }
    })
}

export default getTopPlayerHistory;
</file>

<file path="src/routes/endpointEnrichedUser.ts">
import { enrichedUserSchema } from '../utils/schemas';
import { performanceStatisticsEndpointCall, userByIdEndpointCall } from '../utils/lichessApiCalls';
import { sendError400, sendError404, sendError500 } from '../utils/errors';


const getEnrichedUser = function (fastify: any) {
    fastify.get('/chess/user/enriched', enrichedUserSchema ,async (request: any, reply: any) => { 
        try {
            const { id, mode } = request.query as {id?:string,mode?:string};
            if (!id || !mode) {
                sendError400(reply);
            }

            const userResponse = await userByIdEndpointCall(id);
            const users = userResponse.data as any[];
            const user = Array.isArray(users) && users.length > 0 ? users[0] : null;
            const performanceResponse = await performanceStatisticsEndpointCall(id,mode);
            const perf = performanceResponse.data as any;

            const out = {
                id: user.id,
                username: user.username,
                profile: user.profile,
                playTime: user.playTime,
                rank: typeof perf.stat.rank === "number" ? perf.stat.rank : 0,
                resultStreak: typeof perf.stat.resultStreak === "object" && perf.stat.resultStreak !== null ? perf.stat.resultStreak : {}
            }
            
            reply.send(out);

        } catch (error: any) {
            if (error.response && error.response.status === 404) {
                sendError404(reply);
            }
            if (error.response && error.response.status === 400) {
                sendError400(reply);
            }
            sendError500(reply);
        }

    })

}


export default getEnrichedUser;
</file>

<file path="src/routes/endpointTop10.ts">
import { top10schema } from '../utils/schemas';
import { top10EndpointCall } from '../utils/lichessApiCalls';
import { sendError404, sendError500 } from '../utils/errors';

const getTop10 = function(fastify:any){
    fastify.get('/chess/top10',top10schema,async ( reply:any) => {
        try {
            const response = await top10EndpointCall();
            if (!response.data || Object.keys(response.data).length === 0) {
                sendError404(reply);
            }

            reply.send(response.data);

        } catch (error) {
            sendError500(reply);
        }
    });
    
}


export default getTop10;
</file>

<file path="src/routes/endpointUserById.ts">
import { userByIdSchema } from '../utils/schemas';
import { userByIdEndpointCall } from '../utils/lichessApiCalls';
import { sendError400, sendError404, sendError500 } from '../utils/errors';

const getUserById = function (fastify:any) {
    fastify.get('/chess/user',userByIdSchema, async (request: any, reply: any) => {
        try {
            const { id } = request.query as {id?:string};

            if (!id) {
                sendError400(reply);
                return;
            }

            const response = await userByIdEndpointCall(id);
            if (Array.isArray(response.data)) {
                const mapped = response.data.map((user: any) => {
                    const { perfs, ...rest } = user;
                    return {
                        ...rest,
                        modes: perfs
                    };
                });
                reply.send(mapped);
            } else {
                sendError400(reply);
            }
        } catch (error:any) {
            if (error.response && error.response.status === 404) {
                sendError404(reply);
            }
            if (error.response && error.response.status === 400) {
                sendError400(reply);
            }
            sendError500(reply);
        }
    });
}

export default getUserById;
</file>

</files>
